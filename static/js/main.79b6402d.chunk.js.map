{"version":3,"sources":["assets/logo.svg","js/components/config.js","App.js","js/serviceWorker.js","index.js"],"names":["module","exports","conditionalValues","Conditionals","conditionals","console","log","map","conditional","i","id","key","className","type","defaultValue","htmlFor","Config","parentAbility","onConfigUpdate","onChange","e","target","value","condition","trim","length","conditions","style","maxWidth","App","useState","config","setConfig","Output","macro","ability","whiteSpace","rows","conditionString","join","readOnly","_config","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.79b6402d.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.ee7cd8ed.svg\";","import React from \"react\";\r\nvar conditionalValues = [\r\n  \"combat\",\r\n  \"exists\",\r\n  \"dead\",\r\n  \"harm\",\r\n  \"help\",\r\n  \"stealth\",\r\n  \"mounted\",\r\n  \"channeling\",\r\n  \"vehicleui\",\r\n  \"party\",\r\n  \"raid\",\r\n  \"indoors\",\r\n  \"outdoors\",\r\n  \"pet:name\",\r\n];\r\n\r\nfunction Conditionals({ conditionals = [] }) {\r\n  console.log(conditionals);\r\n  return conditionals.map(function (conditional, i) {\r\n    let id = \"additionalConditional\" + (i + 1);\r\n    return (\r\n      <div key={id} className=\"form-check form-check-inline\">\r\n        <input\r\n          className=\"form-check-input\"\r\n          type=\"checkbox\"\r\n          id={id}\r\n          defaultValue={conditional}\r\n        />\r\n        <label className=\"form-check-label\" htmlFor={id}>\r\n          {conditional}\r\n        </label>\r\n      </div>\r\n    );\r\n  });\r\n}\r\n\r\nexport default function Config({ parentAbility, onConfigUpdate }) {\r\n  let handleConditionalChange = (condition) => {\r\n    //check if the condtion @Player, @Mouseover etc. has a length that is basically non-empty.\r\n    if (condition.trim().length > 1) {\r\n      onConfigUpdate({ conditions: [condition] });\r\n    } else {\r\n      onConfigUpdate({ conditions: [] });\r\n    }\r\n  };\r\n  return (\r\n    <div className=\"\">\r\n      <div className=\"d-flex justify-content-center form-inline\">\r\n        <div className=\"input-group mb-2 mr-sm-2\">\r\n          <div className=\"input-group-prepend\">\r\n            <div className=\"input-group-text\">Cast</div>\r\n          </div>\r\n          <input\r\n            id=\"mainSpell\"\r\n            className=\"form-control\"\r\n            key=\"parentAbility\"\r\n            type=\"text\"\r\n            onChange={(e) => {\r\n              onConfigUpdate({ parentAbility: e.target.value });\r\n            }}\r\n            value={parentAbility}\r\n          ></input>\r\n        </div>\r\n        <form className=\"form-group\">\r\n          <div className=\"input-group mb-2 mr-sm-2\">\r\n            <div className=\"input-group-prepend\">\r\n              <div className=\"input-group-text\">on</div>\r\n            </div>\r\n            <select\r\n              className=\"form-control\"\r\n              id=\"targetConditonal\"\r\n              onChange={(e) => handleConditionalChange(e.target.value)}\r\n            >\r\n              <option value=\"\">target</option>\r\n              <option value=\"@Focus\">focused target</option>\r\n              <option value=\"@Player\">myself</option>\r\n              <option value=\"@Mouseover\">mouseover</option>\r\n              <option value=\"@Cursor\">cursor</option>\r\n              <option value=\"@Pet\">my pet</option>\r\n              <option value=\"@Arena1\">arena target 1</option>\r\n              <option value=\"@Arena2\">arena target 2</option>\r\n              <option value=\"@Arena3\">arena target 3</option>\r\n            </select>\r\n          </div>\r\n        </form>\r\n      </div>\r\n\r\n      <div className=\"d-flex justify-content-center\">\r\n        <div className=\"form-check\">\r\n          <Conditionals\r\n            conditionals={conditionalValues}\r\n            style={{ maxWidth: \"30px\" }}\r\n          ></Conditionals>\r\n        </div>\r\n      </div>\r\n      <br></br>\r\n    </div>\r\n  );\r\n}\r\n","import React, { useEffect, useState } from \"react\";\r\nimport logo from \"./assets/logo.svg\";\r\nimport \"bootstrap/dist/css/bootstrap.css\";\r\nimport \"./scss/app.scss\";\r\n\r\nimport Config from \"./js/components/config\";\r\n\r\nfunction App() {\r\n  const [config, setConfig] = useState({\r\n    parentAbility: \"Mass Dispel\",\r\n    conditions: [],\r\n  });\r\n\r\n  function Output({ parentAbility, conditions, ability }) {\r\n    let macro = \"#showtooltip\\n/cast \";\r\n    var test = (event) => {};\r\n    return (\r\n      <div className=\"form-group\">\r\n        <label htmlFor=\"exampleFormControlTextarea1\">Output Macro</label>\r\n        <textarea\r\n          style={{ whiteSpace: \"pre-wrap\" }}\r\n          className=\"form-control\"\r\n          id=\"exampleFormControlTextarea1\"\r\n          rows=\"3\"\r\n          value={(() => {\r\n            //if there are conditions then append them using the [] macro syntax\r\n            if (!conditions?.length == 0) {\r\n              let conditionString = conditions.join(\" \");\r\n              let condition = \"[\" + conditionString + \"] \";\r\n              macro += condition;\r\n            }\r\n            return (macro += parentAbility);\r\n          })()}\r\n          readOnly\r\n        ></textarea>\r\n      </div>\r\n    );\r\n  }\r\n\r\n  return (\r\n    <>\r\n      <Config\r\n        parentAbility={config.parentAbility}\r\n        onConfigUpdate={(_config) => {\r\n          setConfig({ ...config, ..._config });\r\n        }}\r\n      ></Config>\r\n      <Output\r\n        parentAbility={config.parentAbility}\r\n        conditions={config.conditions}\r\n      ></Output>\r\n    </>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' },\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import React from \"react\";\r\nimport ReactDOM from \"react-dom\";\r\nimport App from \"./App\";\r\nimport * as serviceWorker from \"./js/serviceWorker\";\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById(\"root\")\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}